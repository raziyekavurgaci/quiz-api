// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  TEACHER
  STUDENT
}

enum OptionLabel {
  A
  B
  C
  D
  E
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  role   Role     @default(STUDENT)
  answer Answer[]
  scores Score[]
}

model Question {
  id           String   @id @default(uuid())
  questionText String // Soru metni
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  options Option[]
  answer  Answer[]
}

model Option {
  id         String   @id @default(uuid())
  questionId String
  optionText String
  isCorrect  Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  question   Question    @relation(fields: [questionId], references: [id])
  answers    Answer[] // Bu seçeneği seçen cevaplar
  optionType OptionLabel // Seçeneğin tipi (A,B,C,D,E)
}

model Answer {
  id         String   @id @default(uuid())
  userId     String
  questionId String
  optionId   String
  isCorrect  Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user     User     @relation(fields: [userId], references: [id])
  question Question @relation(fields: [questionId], references: [id])
  option   Option   @relation(fields: [optionId], references: [id])
}

model Score {
  id           String   @id @default(uuid())
  userId       String
  totalPoints  Int      @default(0)
  correctCount Int      @default(0)
  wrongCount   Int      @default(0)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])
}
