// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  TEACHER
  STUDENT
}

enum OptionLabel {
  A
  B
  C
  D
  E
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  role          Role           @default(STUDENT)
  quizzes       Quiz[]
  answer        Answer[]
  scores        Score[]
  questionsPool QuestionPool[]
}

model Quiz {
  id        String   @id @default(uuid())
  duration  Int
  authorId  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  scores   Score[]
  author   User       @relation(fields: [authorId], references: [id])
  question Question[]
}

model Question {
  id             String   @id @default(uuid())
  quizId         String
  questionPoolId String
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  quiz         Quiz         @relation(fields: [quizId], references: [id])
  answer       Answer[]
  questionPool QuestionPool @relation(fields: [questionPoolId], references: [id])
}

model QuestionPool {
  id           String   @id @default(uuid())
  authorId     String
  questionText String
  points       Int      @default(1)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  author        User        @relation(fields: [authorId], references: [id])
  options       Option[] // Sorunun seçenekleri
  correctOption OptionLabel // doğru cevabın tipi (A,B,C,D,E)
  Question      Question[]
}

model Option {
  id         String   @id @default(uuid())
  questionId String
  optionText String // Seçeneğin metni
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  question   QuestionPool @relation(fields: [questionId], references: [id])
  answers    Answer[] // Bu seçeneği seçen cevaplar
  optionType OptionLabel // Seçeneğin tipi (A,B,C,D,E)
}

model Answer {
  id         String   @id @default(uuid())
  userId     String
  questionId String // QuizQuestion'a referans
  optionId   String // Seçilen Option'a referans
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user     User     @relation(fields: [userId], references: [id])
  option   Option   @relation(fields: [optionId], references: [id])
  Question Question @relation(fields: [questionId], references: [id])
}

model Score {
  id                String   @id @default(uuid())
  userId            String
  quizId            String
  points            Int
  correctQuestionId String[]
  wrongQuestionId   String[]
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])
  quiz Quiz @relation(fields: [quizId], references: [id])
}

// önce endpoinleri ayarla

// shared repo decoratorlarını yap
// guard pipe araştır
// Generic Repository Pattern in Typescript with NestJS prisma service ve module
